/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// identity function for calling harmony imports with the correct context
/******/ 	__webpack_require__.i = function(value) { return value; };
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports) {

window.Model = Backbone.Model.extend(
{

    initialize: function()
    {
     this.bind("change:name",function()
     {
        console.log('name改为-'+this.get('name'))
        })
    },

    name :'我是M',

    ajax :function(v)
    {
        console.log('请求后台数据')
    }
})

/***/ }),
/* 1 */
/***/ (function(module, exports) {

window.Router = Backbone.Router.extend(
{
    routes : 
    {
        ''          : 'main',  
        'topic'     : 'renderList',  
        'topic/:id' : 'renderDetail',  
        '*error'    : 'renderError'  
    },  

    main:function() 
    {
        console.log('应用入口方法');  
    },  

    renderList:function() 
    {
        console.log('渲染列表方法');  
    }, 

    renderDetail:function(id) 
    {
        console.log('渲染详情方法, id为: ' + id);  
    }, 

    renderError : function(error) 
    {
        console.log('URL错误, 错误信息: ' + error);  
    }  
});

/***/ }),
/* 2 */
/***/ (function(module, exports) {

window.View = Backbone.View.extend(
{
    initialize:function()
    {
        $(this.el).bind('click',this.click)
    },

    el:$("#panel"),

    render:function(context) 
    {
      $(this.el).html(context);
    },

    click:function()
    {
        console.log('点击事件')
    }
})

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

/**
 * 页面加载完成
 */
window.onload = function()
{
	__webpack_require__(0);
	__webpack_require__(2);
	__webpack_require__(1);
	
	
	//路由
	var router = new Router();  

    Backbone.history.start();  
    
    
    //视图
    var view = new View();

    console.log(view.el)

    view.render('<p>替换原有内容</p>')
    
    
    //数据
    var model = new Model()

    model.ajax()

    console.log(model.name) 

    model.set({name:'MVC中的M模型'});
}


/***/ })
/******/ ]);